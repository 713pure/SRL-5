//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--                     Fighting routines                       --//
//-----------------------------------------------------------------//
// * function Damage: Integer;                                     // * by WT-Fakawi
// * function FightNPC(Colors: TIntegerArray; Tol, TimeOut: Integer): Boolean; // * by WT-Fakawi & Cazax
// * function InFight: Boolean;                                    // * by WT-Fakawi, N1ke! & ZephyrsFury
// * function IsFightAt(x, y: Integer): Boolean;                   // * by RealRune & N1ke!
// * function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): Array of TPointArray; // * by n3ss3s
// * function GetHitsIn(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray; // * by n3ss3s
// * function FindMainScreenHits(Bar: Integer): Integer;           // * by n3ss3s

{*******************************************************************************
function Damage: Integer;
By: WT-Fakawi
Description: Returns the amount of damage inflicted on current player.
*******************************************************************************}
function Damage:Integer;
begin
  Result := (GetSkillInfo('hitpoints', False) - GetSkillInfo('hitpoints', True));
end;

{*****************************************************************************
function InFight: Boolean;
By: Frement
Description: Returns as True if player is in a fight.
See "srl_FindFight;" in /core/Globals.scar for more info.
*****************************************************************************}
function InFight: Boolean;
begin
  Result := srl_InFight;
end;

{*****************************************************************************
function IsFightAt(x, y: Integer): Boolean;
By: Frement
Description: Results True if a mainscreen HP bar is found near point X, Y.
See srl_InFight in Globals.scar for more info.
*****************************************************************************}
function IsFightAt(var X, Y: Integer): Boolean;
var
  HPBarCorner: Integer;
begin
  HPBarCorner := DTMFromString('78DA6364646060606540051A108A11CA6504315888' +
       '50C34C841A26026A988854C348400D33116A588850C34A841A36C26A0046A001D4');
  Result := FindDTM(HPBarCorner, X, Y, X - 30, Y - 30, X + 30, Y + 30);
  FreeDTM(HPBarCorner);
end;

{*******************************************************************************
function FightNPC(Colors: TIntegerArray; Tol, TimeOut: Integer): Boolean;
By: WT-Fakawi & Cazax
Description: Fights NPC. Input an array of colors. (May be the same colors),
tol = tolerance, TimeOut = amount of time before clicking on next NPC
*******************************************************************************}
function FightNPC(Colors: TIntegerArray; Tol, TimeOut: Integer): Boolean;
var
  X, Y, Mark: Integer;
begin
  Result := False;
  if (not LoggedIn) or (FindDead) then exit;
  if FindObjCustom(X, Y, ['ttack'], Colors, Tol) then
  begin
    Result := True;
    GetMousePos(X, Y);
    Mouse(X, Y, 0, 0, True);
    Wait(1000 + Random(500));
    FFlag(10);
    Mark := GetSystemTime;
    while (InFight) and (TimeFromMark(Mark) < TimeOut) and (not FindNormalRandoms) do
    begin
      Wait(1000 + Random(500));
      if (srl_Procs[srl_AntiBan] <> nil) then
        srl_Procs[srl_AntiBan]();
    end;
  end;
end;

{*******************************************************************************
function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): TBoxArray;
By: Cazax
Description: Finds all the HP bars (the TPAs of them) in the box formed by
 x1, y1, x2, y2. Recommended to set Sx and Sy to MSCX and MSCY, so Result[0]
 is your own Bar or the closest one to you.
*******************************************************************************}
function FindAllHPBars(Sx, Sy, x1, y1, x2, y2: Integer): TBoxArray;
var
  a, b : TPointArray;
  ATPA : T2DPointArray;
  H, I : Integer;
begin
  FindColorsSpiralTolerance(Sx, Sy, a, 10496, x1, y1, x2, y2, 0);
  FindColorsSpiralTolerance(Sx, Sy, b, 198716, x1, y1, x2, y2, 0);
  ATPA := TPAToATPAEx(CombineTPA(a, b), 55, 7);
  H := High(ATPA);
  SetLength(Result, Length(ATPA));
  for I := 0 to H do
    Result[i] := GetTPABounds(ATPA[i]);
end;

{*******************************************************************************
function GetHits(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray;
By: n3ss3s & Cazax
Description: Finds all HP percents of the HP bars in x1, y1, x2, y2.
 READ THE DESCRIPTION OF FindAllHPBars!
*******************************************************************************}
function GetHitsIn(Sx, Sy, x1, y1, x2, y2: Integer): TIntegerArray;
var
   E: Extended;
   I, H: Integer;
   TBA : TBoxArray;
begin
  TBA := FindAllHPBars(Sx, Sy, x1, y1, x2, y2);
  SetArrayLength(Result, GetArrayLength(TBA));
  H := High(TBA);
  for I := 0 To H Do
  begin
    E := CountColorTolerance(56488, TBA[i].x1, TBA[i].y1, TBA[i].x2, TBA[i].y2, 43) / 60;
    Result[i] := Round(100 * E);
  end;
end;

{*******************************************************************************
function FindMainScreenHits(Bar: Integer): Integer;
By: n3ss3s
Description: Returns the rounded HP percent of the hp bar Bar counting out from
 main screen centre, if Bar is 0, it's your own bar or the closest one to you.
 If could not find the bar Bar, returns -1 so you can't confuse it to 0 HP%.
*******************************************************************************}
function FindMainScreenHits(Bar: Integer): Integer;
var
   TIA: TIntegerArray;
begin
  TIA := GetHitsIn(MSCX, MSCY, MSX1, MSY1, MSX2, MSY2);
  try
    Result := TIA[bar];
  except
    Result := -1;
  end;
end;

{*******************************************************************************
function SetFightModeByLevel(TrainLowestSkill : Boolean) : Boolean;
By: Rich
Description: Changes fight style to train lowest or highest skill depending on
             TrainLowestSkill.
Usage example: Attack = 31, Defense = 45, Strength = 26
               TrainLowestSkill = True -> Strength will be trained
               TrainLowestSkill = False -> Defense will be trained
Date: 21st Feb 2011
*******************************************************************************}
function SetFightModeByLevel(TrainLowestSkill: Boolean) : Boolean;
var
  FM, HL : Integer;
  S, Skills : TIntegerArray;
begin
  Result:= False;
  if (not LoggedIn) then
    Exit;

  Skills := [GetSkillLevel('attack'), GetSkillLevel('strength'), GetSkillLevel('defence')];
  S := [Skills[0], Skills[1], Skills[2]];

  QuickSort(Skills);

  if TrainLowestSkill then
    HL := Low(Skills)
  else
    HL := High(Skills);

  case Skills[HL] of
    S[0]: Result := SetFightMode(1);
    S[1]: Result := SetFightMode(2);
    S[2]: Result := SetFightMode(3);
  end;
end;
