//-----------------------------------------------------------------//
//--               SRL Resource           Library                --//
//--               » MapWalking Routines                         --//
//-----------------------------------------------------------------//
// * function rs_GetCompassAngleDegrees: Extended;                 // by Wizzup?
// * function rs_GetCompassAngleRadians: Extended;                 // by Wizzup?
// * procedure MouseBox(xs, ys, xe, ye: Integer; click: Integer);  // by SKy Scripter and Nielsie95
// * procedure rs_OnMinimap(x, y: Integer): Boolean;               // by Raymond
// * function RBoolEx(chance: integer): boolean;                   // by Rasta Magician
// * function RBool: boolean;                                      // by Rasta Magician
// * function FindTransparentBitmap(Bitmap: Integer; var x, y: Integer; Col, x1, y1, x2, y2: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.
// * function FindTransparentBitmapTolerance(Bitmap: Integer; var x, y: Integer; Col, x1, y1, x2, y2, Tol: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.
// * function FindColors(var TPA: TPointArray; Color, x1, y1, x2, y2: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.

{*******************************************************************************
function Function rs_GetCompassAngleDegrees: Extended;
By: Wizzup
Description: Returns the compass angle in degrees.
*******************************************************************************}
function rs_GetCompassAngleDegrees: Extended;
var
   Compass: TPointArray;
   MyPoint: TPoint;
begin
  Result := -1;
  FindColorsTolerance(Compass, 1911089, 520, 2, 560, 40, 0);
  if (Length(Compass) < 1) then
    Exit;
  MyPoint := MiddleTPA(Compass);
  Result := Degrees(ArcTan2(-(MyPoint.Y - 24), MyPoint.X - 543)) - 90;
  if (Result < 0) then
    Result := Result + 360;
end;

{*******************************************************************************
function rs_GetCompassAngleRadians: Extended;
By: Wizzup
Description: Returns the compass angle in radians.
*******************************************************************************}
function rs_GetCompassAngleRadians: Extended;
begin
  Result := Radians(rs_GetCompassAngleDegrees);
end;

{*******************************************************************************
procedure MouseBox(x1, y1, x2, y2: Integer; ClickType: Integer);
By: SKy Scripter and Nielsie95
Description: Moves mouse into a random position in the box. Clicks if told to.
*******************************************************************************}
procedure MouseBox(x1, y1, x2, y2: Integer; ClickType: Integer);
begin
  case ClickType of
    1 : Mouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0, True);
    2 : Mouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0, False);
    3 : MMouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0);
  else
    srl_Warn('MouseBox', 'ClickType is NOT a valid number!', warn_AllVersions);
  end;
end;

{*******************************************************************************
function rs_OnMinimap(x, y: Integer): Boolean;
By: Raymond
Description: Checks wether the specified point is on the minimap.
*******************************************************************************}
function rs_OnMinimap(x, y: Integer): Boolean;
begin
  Result := InCircle(x, y, MMCX, MMCY, 73);
end;

{*******************************************************************************
function RBoolEx(chance: integer): boolean;
By: Rasta Magician
Description: Returns a boolean, with a chance of 1 / chance
*******************************************************************************}
function RBoolEx(chance: Integer): Boolean;
begin
  Result := (0 = Random(chance));
end;

{*******************************************************************************
function RBool: boolean;
By: Rasta Magician
Description: Returns a boolean, with a 50% chance
*******************************************************************************}
function RBool: boolean;
begin
  Result := RBoolEx(2);
end;
