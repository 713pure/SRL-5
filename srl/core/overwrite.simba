//-----------------------------------------------------------------//
//--               SRL Resource Library                          --//
//--               » MapWalking Routines                         --//
//-----------------------------------------------------------------//
// * function rs_GetCompassAngleDegrees: Extended;                 // by Wizzup?
// * function rs_GetCompassAngleRadians: Extended;                 // by Wizzup?
// * procedure MouseBox(xs, ys, xe, ye: Integer; click: Integer);  // by SKy Scripter and Nielsie95
// * procedure rs_OnMinimap(x, y: Integer): Boolean;               // by Raymond
// * function RBoolEx(chance: integer): boolean;                   // by Rasta Magician
// * function RBool: boolean;                                      // by Rasta Magician
// * function FindTransparentBitmap(Bitmap: Integer; var x, y: Integer; Col, x1, y1, x2, y2: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.
// * function FindTransparentBitmapTolerance(Bitmap: Integer; var x, y: Integer; Col, x1, y1, x2, y2, Tol: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.
// * function FindColors(var TPA: TPointArray; Color, x1, y1, x2, y2: Integer): Boolean; // by Nava2, ZephyrsFury, & Quickmarch.

(*
fixRad
~~~~~~

.. code-block:: pascal
    function fixRad(rad: Extended): Extended;

Returns the periodic rad in the range (0,2PI].

.. note::
  By Nava2

*)
function fixRad(rad: Extended): Extended;
var
  __TWO_PI: extended;
begin
  __TWO_PI := 2 * Pi;
  result := rad;

  while (result >= __TWO_PI) do
    result := result - __TWO_PI;

  while (result < 0) do
    result := result + __TWO_PI;
end;

(*
rs_GetCompassAngleRadians
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleRadians: Extended;

Returns the compass angle in radians.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)
function rs_GetCompassAngleRadians: Extended;
var
   Compass: TPointArray;
   MyPoint: TPoint;
begin
  Result := -1;
  FindColorsTolerance(Compass, 7699891, 520, 2, 560, 40, 0);
  if (Length(Compass) < 1) then
    Exit;
  MyPoint := MiddleTPA(Compass);
  Result := ArcTan2(-(MyPoint.Y - 24), MyPoint.X - 543) - Radians(80);

  Result := fixRad(Result);
end;

(*
rs_GetCompassAngleDegrees
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleDegrees: Extended;

Returns the compass angle in degrees.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)
function rs_GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(rs_GetCompassAngleRadians());
end;

(*
MouseBox
~~~~~~~~

.. code-block:: pascal

    procedure MouseBox(x1, y1, x2, y2: Integer; ClickType: Integer);

Moves mouse into a random position in the box. Clicks if told to.

.. note::

    by SKy Scripter and Nielsie95

Example:

.. code-block:: pascal

*)
procedure MouseBox(x1, y1, x2, y2: Integer; ClickType: Integer);
begin
  case ClickType of
    1 : Mouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0, True);
    2 : Mouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0, False);
    3 : MMouse(RandomRange(x1, x2), RandomRange(y1, y2), 0, 0);
  else
    srl_Warn('MouseBox', 'ClickType is NOT a valid number!', warn_AllVersions);
  end;
end;

(*
rs_OnMinimap
~~~~~~~~~~~~

.. code-block:: pascal

    function rs_OnMinimap(x, y: Integer): Boolean;

Checks wether the specified point is on the minimap.

.. note::

    by Raymond

Example:

.. code-block:: pascal

*)
function rs_OnMinimap(x, y: Integer): Boolean;
begin
  Result := InCircle(x, y, MMCX, MMCY, 73);
end;

{*******************************************************************************
function RBoolEx(chance: integer): boolean;
By: Rasta Magician
Description: Returns a boolean, with a chance of 1 / chance
*******************************************************************************}
function RBoolEx(chance: Integer): Boolean;
begin
  Result := (0 = Random(chance));
end;

{*******************************************************************************
function RBool: boolean;
By: Rasta Magician
Description: Returns a boolean, with a 50% chance
*******************************************************************************}
function RBool: boolean;
begin
  Result := RBoolEx(2);
end;
