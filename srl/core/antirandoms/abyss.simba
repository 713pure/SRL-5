//-----------------------------------------------------------------//
//--               Scar Standard Resource Library                --//
//--               »» Abyss Solver Routines                      --//
//-----------------------------------------------------------------//
// * function InAbyss: Boolean;                                               // * by Nava2
// * procedure Abyss_WalkToCenter;                                            // * by IceFire908
// * function Abyss_OddManOut(var P: TPoint): string;                         // * by IceFire908
// * procedure Abyss_ClickLever;                                              // * by IceFire908
// * function SolveAbyss: Boolean;                                            // * by IceFire908 & Nava2

{*******************************************************************************
function InAbyss: Boolean;
By: Nava2
Description: Searches the Minimap for a black count. If in range, we are in the
             abyss.
*******************************************************************************}
function InAbyss: Boolean;
var
  Pts: TPointArray;
  cts: Integer;
begin
  if (CountDots('yellow') > 1) then
    Exit;
  cts := GetColorToleranceSpeed;
  ColorToleranceSpeed(1);
  FindColorsTolerance(Pts, 0, MMX1, MMY1, MMX2, MMY2, 20);
  FilterPointsPie(Pts, 0, 360, 50, 76, MMCX, MMCY);
  Result := InRange(Length(Pts), 10100, 10200);
  ColorToleranceSpeed(cts);
  //Writeln('InAbyss returned ' + IntToStr(Length(Pts)) + '.');
end;

{*******************************************************************************
procedure Abyss_WalkToCenter;
By: IceFire908
Description: Walks to center and aligns everything high angle and compass 45deg
*******************************************************************************}

procedure Abyss_WalkToCenter;
var
  TPA: TPointArray;
  WTC: TPoint;
begin
  MakeCompass(45);//Align Northeast to North
  SetAngle(True); //High angle
  FindColorsTolerance(TPA, clWhite, MMX1, MMY1, MMX2, MMY2, 421); //All but black
  FilterPointsPie(TPA, 0, 360, 0, 75, MMCX, MMCY);                //On Minimap
  WTC := MiddleTPA(TPA);
  if (Distance(MMCX, MMCY, WTC.X + 2, WTC.Y - 3) > 4) then       //Not standing in
  begin
    Mouse(WTC.X + 2, WTC.Y - 3, 0, 0, True);                    //Walk to
    Flag;
  end;
  Wait(2000 + Random(500));                                    //Wait a second
end;

{*******************************************************************************
function Abyss_OddManOut(var P: TPoint): string;
By: IceFire908
Description: Sorts through colors of each lever, finds the odd one.
*******************************************************************************}

function Abyss_OddManOut(var P: TPoint): string; //Results North south east west or ''
var //      each direction       each color except none "arm"
  TPA: array [0..3] of array [0..2] of TPointArray;
  LvCounts: array [0..3] of Integer; //Eye0 Gray1 Pink2 Arm3 amounts
  LeverType: array [0..3] of string; //Levertypes for N[0]-E[1]-S[2]-W[3] North south e...we.. ect.
  LPos: array [0..3] of TPoint; //The position of each lever for NSEW
  Levers: TVariantArray; //Name, Hue, Sat, Col, LumTol, speed2
  Locs: TStringArray;  //Gives each direction an index
  Sec: TPointArray;  //Estimated center point of each direction, take or give max 45pixels each way
  I, II: Byte; //Used for small loops/indexs
  TC: LongInt; //Used for InStrArrEx which doesn't accept bytes
  B: TBox; //Box to search in for each direction, reset each loop by Loccenter + or -45
begin   //NW (N)          NE (E)          SE (S)           SW (W)
  Sec := [Point(140, 46), Point(364, 29), Point(405, 250), Point(140, 265)];
  Levers := ['Eye', 0.01, 0.59, 4828173, 21, 'Gray', 0.04, 0.32, 8095897, 19, 'Pink', 0.10, 0.07, 5262692, 9, 'Arm'];
  Locs := ['North', 'East', 'South', 'West'];
  ColorToleranceSpeed(2);
  for I := 0 to 3 do
  begin
    B := IntToBox(Sec[I].X - 45, Sec[I].Y - 45, Sec[I].X + 45, Sec[I].Y + 45);
    if (B.X1 < MSX1) then
      B.X1 := MSX1;
    if (B.Y1 < MSY1) then
      B.Y1 := MSY1;
    if (B.X2 > MSX2) then
      B.X2 := MSX2;
    if (B.Y2 > MSY2) then
      B.Y2 := MSY2;
    for II := 0 to 2 do
    begin
      SetColorSpeed2Modifiers(Levers[1 + (II * 5)], Levers[2 + (II * 5)]);
      FindColorsTolerance(TPA[I][II], Levers[3 + (II * 5)], B.X1, B.Y1, B.X2, B.Y2, Levers[4 + (II * 5)]);
      if (Length(TPA[I][II]) > 0) then
      begin
        LPos[I] := MiddleTPA(TPA[I][II]); //Center of colors matched
        LeverType[I] := Levers[II * 5]; //Get name and set to direction index
        Wait(100); //avoid loop lag
        Break; //found color, no need to search for other parts
      end;
      Wait(100); //avoid loop lag
    end;
  end;
  SetColorSpeed2Modifiers(0.2, 0.2);
  ColorToleranceSpeed(1);
  for I := 0 to 3 do
  begin
    if (LeverType[I] = '') then //Arm had no color, so by process of elimination its plain arm
      LeverType[I] := 'Arm';
    WriteLn(LeverType[I] + ' found in ' + Locs[I] + '.'); //i.e. Eyeball found in north does all 4 locs
  end;
  for I := 0 to 3 do
    for II := 0 to 3 do
    begin
      if (II < 3) then //Since arm doesn't have a TPA which is index 3
        if (Length(TPA[I][II]) > 0) then //checks TPA length and increases the index for lvr counts
          Inc(LvCounts[II]); //+1
      if (II = 3) then //Arm
        if (LeverType[I] = 'Arm') then
          Inc(LvCounts[3]); //Add to arm count
    end;
  if (LvCounts[3] = 2) then //Pink isn't always visible so if two arms indx(3) then set 3 pinks
  begin
    LvCounts[3] := 0; //no normal arms
    LvCounts[2] := 3; //3 pink ones
  end;
  for I := 0 to 3 do
    WriteLn(Levers[I * 5] + ' count: ' + IntToStr(LvCounts[I])); //writeln all lver counts i.e. Eyeball : 3
  for I := 0 to 3 do
    if (LvCounts[I] = 1) then //if there is just 1 count of one then do the following
    begin
      InStrArrEx(Levers[I * 5], LeverType, TC); //Match Index with lever name
      WriteLn('Found unique! ' + Levers[I * 5] + ' in ' + Locs[TC] + '.'); //Output unique with location
      if (not (PointInBox(LPos[TC], IntToBox(MSX1, MSY1, MSX2, MSY2)))) then //check if NOT on MS
        LPos[TC] := Sec[TC] //Out put estimated fixed middle of that loc
      else
        P := LPos[TC]; //Out put middle of TPA from big loop with findcolors for that loc
      Result := Locs[TC]; //result = location
      Exit; //leave function
    end;
  WriteLn('No uniques found!'); //all were the same result = ''
end;

{*******************************************************************************
procedure Abyss_ClickLever;
By: IceFire908
Description: Clicks lever, if it didn't find a unique it guesses.
*******************************************************************************}

procedure Abyss_ClickLever;
var
  Locs: TStringArray;
  Sec: TPointArray;
  LLoc: string;
  I: LongInt;
  P: TPoint;
  B: TBox;
begin
  Locs := ['North', 'East', 'South', 'West']; //Loc index
  Sec := [Point(140, 46), Point(364, 29), Point(405, 250), Point(140, 265)]; // Loc middle index
  LLoc := Abyss_OddManOut(P); //LLoc = unique lever location
  if (LLoc <> '') then //if oddmanout found a unique then..
  begin
    MMouse(P.X, P.Y, 0, 0); //hover mouse
    Wait(200 + Random(250)); //uptime
    if (CountColorTolerance(14342657, 7, 7, 100, 25, 70) > 50) then //check blue text
      Mouse(P.X, P.Y, 0, 0, True) //select
    else
    begin
      InStrArrEx(LLoc, Locs, I); //Match up indexes
      B := IntToBox(Sec[I].X - 45, Sec[I].Y - 45, Sec[I].X + 45, Sec[I].Y + 45); //set box
      if (B.X1 < MSX1) then
        B.X1 := MSX1;
      if (B.Y1 < MSY1) then
        B.Y1 := MSY1;
      if (B.X2 > MSX2) then
        B.X2 := MSX2;
      if (B.Y2 > MSY2) then
        B.Y2 := MSY2;
      if (SpiralMouse(P.X, P.Y, B.X1, B.Y1, B.X2, B.Y2, 'ppend', 30, 8)) then //hover mouse around til text
        Mouse(P.X, P.Y, 0, 0, True); //selected in the section
    end;
    Exit;
  end;
  I := Random(4); //random location
  B := IntToBox(Sec[I].X - 45, Sec[I].Y - 45, Sec[I].X + 45, Sec[I].Y + 45); //random box
  if (B.X1 < MSX1) then
    B.X1 := MSX1;
  if (B.Y1 < MSY1) then
    B.Y1 := MSY1;
  if (B.X2 > MSX2) then
    B.X2 := MSX2;
  if (B.Y2 > MSY2) then
    B.Y2 := MSY2;
  WriteLn('Guessing...');
  if (SpiralMouse(P.X, P.Y, B.X1, B.Y1, B.X2, B.Y2, 'ppend', 30, 8)) then
    Mouse(P.X, P.Y, 0, 0, True); //select random
end;

{*******************************************************************************
function SolveAbyss: Boolean;
By: IceFire908 & Nava2
Description: Solves the Abyss Random.
*******************************************************************************}

function SolveAbyss: Boolean;
var
  T, Trys: LongInt;
begin
  T := GetSystemTime; //total function time
  if (not (InAbyss)) then
    Exit;
  while ((InAbyss) and (LoggedIn) and (Trys < 6)) do //stops after 5 trys, logged out, or out of random
  begin
    if (Trys > 0) then //guessed
      srl_Warn('SolveAbyss', 'Failed finding right answer. Retrying, attempt #' + IntToStr(Trys) + '.', warn_AllVersions);
    Abyss_WalkToCenter; //align/realign
    Abyss_ClickLever; //select lever, if not found then guess
    FFlag(0); //wait till at lever
    Wait(RandomRange(8000, 9000)); //wait for response
    while (ClickContinue(True, True)) do
      Wait(500 + Random(1000));
    Inc(Trys); //Trys +1
  end;
  Result := ((not (InAbyss)) and (LoggedIn)); //Logged in and not in random
  if (not (Result)) then //Still in random or logged out
  begin
    LogOut; //GTFO!
    Exit;
  end;
  srl_Warn('SolveAbyss', 'Took ' + IntToStr(GetTimeRunning - T) + ' ms.', warn_Debug); //Debug total time
end;
