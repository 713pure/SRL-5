(*
Maze
====

The Maze file stores the routines to solve the maze random event.

*)

{$IFNDEF IS_INCLUDE}
  //{$i srl/srl.simba}
  //{$i common.simba}
{$ENDIF}

type
  TMazePath = record
    name: string;
    area: TBox;                  // area to search for black on MM
    minCount, maxCount: integer; // range for lenght of black found on MM
    path: array of TVariantArray; // [x, y, compassAngle] if compassAngle = '', it won't look for the door (some rooms need to walk further)
  end;
  TMazePathArray = array of TMazePath;

const
  MAZE_PATH_COUNT = 5;
    MAZE_PATH_NW     = 0;
    MAZE_PATH_NE     = 1;
    MAZE_PATH_SE     = 2;
    MAZE_PATH_SW     = 3;
    MAZE_PATH_COMMON = 4;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Returns true if player is in the random.
 *)
function Maze_Detect(): boolean;
begin
  result := (GetNPCChatName() = 'Dygt8!loqgGlgD50') and (not tabExists(TAB_MAGIC));
end;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Returns an array of all the different maze paths.
 *)
function Maze_GetPaths(): TMazePathArray;
begin
  setLength(result, MAZE_PATH_COUNT);

  with result[MAZE_PATH_NW] do
  begin
    name := 'North West';
    area := intToBox(551, 78, 610, 110);
    minCount := 1300;
    maxCount := 2000;

    path := [[586, 82, 'w'], [658, 78, 'w'], [602, 97, 's'], [590, 76, 's'],
             [642, 80, 's'], [594, 73, 'w'], [604, 89, 'w'], [578, 89, 'w'],
             [612, 90, 'w'], [584, 79, 's'], [628, 152, ''], [638, 92, 's'],
             [583, 78, 's']];
  end;

  with result[MAZE_PATH_NE] do
  begin
    name := 'North East';
    area := intToBox(668, 60, 687, 73);
    minCount := 100;
    maxCount := 1200;

    path := [[630, 86, 's'], [672, 94, 's'], [676, 83, 's'], [609, 78, 's'],
             [645, 78, 's'], [581, 77, 's'], [670, 80, 's'], [604, 49, 'w'],
             [608, 94, 's'], [575, 81, 'w'], [609, 128, 's'], [583, 78, 's']];
  end;

  with result[MAZE_PATH_SE] do
  begin
    name := 'South East';
    area := intToBox(MMCX, MMCY, MMX2, MMY2);
    minCount := 800;
    maxCount := 3400;

    path := [[580, 82, 's'], [698, 79, 's'], [577, 84, ''], [590, 55, 'e'],
             [587, 89, 'e'], [598, 88, 'e'], [684, 87, 'e'], [571, 90, ''],
             [603, 78, 'e'], [590, 83, 'e'], [610, 77, 'n'], [695, 72, 'e'],
             [594, 87, 'e'], [595, 76, 'n']];
  end;

  with result[MAZE_PATH_SW] do
  begin
    name := 'South West';
    area := intToBox(550, 84, 626, 166);
    minCount := 3500;
    maxCount := 9999;

    path := [[576, 81, 's'], [674, 33, 'w'], [676, 90, 'w'], [578, 93, 'w'],
             [605, 91, 'w'], [593, 76, 's'], [583, 86, 's'], [650, 93, 's'],
             [639, 143, 'w'], [660, 77, 'w'], [645, 58, 's'], [640, 34, 'w'],
             [612, 137, 's'], [583, 78, 's']];
  end;

  // the end of each path is commone throughout
  with result[MAZE_PATH_COMMON] do
  begin
    name := 'Common';
    path := [[614, 100, 'w'], [662, 83, 's'], [627, 51, 's'], [637, 89, 'w']];
  end;
end;

(**
 * Author: Naum & Coh3n
 * Description: Returns the path for the current player.
 *)
function Maze_DetectPath(paths: TMazePathArray; var resultPath: TMazePath): boolean;
var
  i, tmpCount: integer;
begin
  if (not loggedIn()) then
    exit;

  clickNorth(SRL_ANGLE_HIGH); // REQUIRED!

  for i := 0 to high(paths) do
    with paths[i] do
    begin
      // so it doesn't look for MAZE_PATH_COMMON spawn (doesn't exist)
      if (i = MAZE_PATH_COMMON) then
        continue;

      tmpCount := countColorTolerance(clBlack, area.x1, area.y1, area.x2, area.y2, 50);

      if (inRange(tmpCount, minCount, maxCount)) then
      begin
        writeln('Maze_DetectPath: Found path - '+name);
        resultPath := paths[i];
        result := true;
        break;
      end;
    end;
end;

(**
 * Author: DemiseScythe & Coh3n
 * Description: Walks the path.
 *)
function Maze_WalkPath(path: TMazePath): boolean;
var
  i, t, dtmDoor: integer;
begin
  if (not loggedIn()) then
    exit;

  dtmDoor := DTMFromString('m6wAAAHic42ZgYGBhZGD4C6S5gDQnI4L/E4j5gOxvQFqUEcJuAbKbobgWiOugdAMQ1wNxGxS3A7G9rQ1WXFNRBsbIYvxA9cRioDMYmIjESAAAxmMT4g==');
  writeln('Maze_WalkPath: Walking '+path.name+' path');

  for i := 0 to high(path.path) do
  begin
    if (path.path[i][2] <> '') then
      makeCompass(path.path[i][2]);

    mouse(path.path[i][0], path.path[i][1], 2, 2, mouse_Left);
    flag();
    wait(1500 + random(500));

    // if we want to look for the door (some rooms have more than one walking point)
    if (path.path[i][2] <> '') then
    begin
      t := (getSystemTime + 10000); // 10 seconds to click the door

      // in a loop in case we misclick the door
      repeat
        // box around the center of the player
        if (clickDTMRotatedIn(dtmDoor, 170, 120, 325, 240, -Pi/4, Pi/4, Pi/60, ['pen'], mouse_Left)) then
        begin
          if (didYellowClick()) then // sometimes the door click doesn't register properly
            continue;

          writeln('Maze_WalkPath: Finished room '+toStr(i));
          result := (i = high(path.path));
          wait(2500 + random(500));
          break;
        end;
      until(getSystemTime > t);

      if (getSystemTime > t) then
      begin
        writeln('Maze_WalkPath: Failed to solve room '+toStr(i));
        result := false;
        break;
      end;
    end;
  end;

  if (result) then
    writeln('Maze_WalkPath: Finished path '+path.name)
  else
    writeln('Maze_WalkPath: Didn''t finish path '+path.name);

  freeDTM(dtmDoor);
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Touches the shrine in the middle of the maze.
 *)
function Maze_TouchShrine(): boolean;
var
  dtmShrine, t: integer;
begin
  if (not loggedIn()) then
    exit;

  t := (getSystemTime + 5000);
  dtmShrine := DTMFromString('mggAAAHicY2NgYPgDxD+B+DcQfwJiDkYGhr9A+ggQnwHiy0B8AIgPAvE+IO5obmIwNjRgyEpLZcjLyGAIDw5mqC4rY+AHymHDjDgwBAAAz2UQ6Q==');

  // in a loop to make sure we don't misclick
  repeat
    if (clickDTMRotatedIn(dtmShrine, 220, 175, 285, 225, -Pi/4, Pi/4, Pi/60, ['ouch'], mouse_Left)) then
      result := (not didYellowClick());

    wait(100 + random(300));
  until(result or (getSystemTime > t));

  freeDTM(dtmShrine);
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Solves the Maze random event.
 *)
function Maze_Solve(): boolean;
var
  paths: TMazePathArray;
  path: TMazePath;
begin
  if (not loggedIn()) then
    exit;

  paths := Maze_GetPaths();

  if (Maze_DetectPath(paths, path)) then
  begin
    if (Maze_WalkPath(path)) then
      if (Maze_WalkPath(paths[MAZE_PATH_COMMON])) then
        if (Maze_TouchShrine()) then
          result := waitTabExists(TAB_MAGIC, 15000);
  end else
    writeln('Maze_Solve: Didn''t detect maze path');
end;

{$IFNDEF IS_INCLUDE}
{
begin
  clearDebug();
  activateClient();
  setupSRL();

  Maze_Solve();
end.
}
{$ENDIF}
