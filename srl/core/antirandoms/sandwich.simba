(*
Sandwich Lady
=============

Stores all the routines to solve the Sandwich Lady random.  None of these
routines should be used throughout scripts.  They only need to be called in
SRL's random detection methods.

*)

{$IFNDEF IS_INCLUDE}
  //{$i srl/srl.simba}
  //{$i common.simba}
{$ENDIF}

const
  DTM_SL_COUNT = 7;
    DTM_SL_DONUT     = 0;
    DTM_SL_BAGUETTE  = 1;
    DTM_SL_SQUARE    = 2;
    DTM_SL_TRIANGLE  = 3;
    DTM_SL_ROLL      = 4;
    DTM_SL_PIE       = 5;
    DTM_SL_CHOCOLATE = 6;

(**
 * Author: DemiseScythe
 * Description: Detects if a player is in the Sandwich Lady random.
 *)
function SL_Detect(): boolean;
begin
  result := (getNPCChatName = 'B50gwlo6l5gy') and (not tabExists(TAB_MAGIC));
end;

(**
 * Author: DemiseScythe
 * Description: Loads all needed DTMs to an integer array.
 *)
function SL_GetDTMs(): TIntegerArray;
begin
  setLength(result, DTM_SL_COUNT);

  result[DTM_SL_DONUT]     := DTMFromString('mrAAAAHic42BgYGiH4kYgrgDiPCAuBOJqIG4D4mtAfAGITwLxKSC+CMR3gPgREN8F6ckxZajJN2coyzJhaCyxZIgP0wKL5SQagMX5gWrwYUYCGAYApHMTqQ==');
  result[DTM_SL_BAGUETTE]  := DTMFromString('mAAEAAHic42FgYNjCyMCwHYg3Q+kdQLwbiPcC8QYg3grEG4F4DRCvB+KHQD13gPgmEF8F4hNAfBqIjwDxUyB+CcTvgfgHEP8H4sUTYhiqMswY0sJ1GRb2RTMUJRoztBZaM6ydkcjQVeXHsH5WEkNNpjnD5KZghq0L0hj4gXpIwYwkYmQAALnFI/k=');
  result[DTM_SL_SQUARE]    := DTMFromString('mFQEAAHic42VgYDBkZGAwB2JbIDYCYl0gVgRiaSDWgIpZAbEDELsAsR0QTwDqawPiWiBuhtKtQDwViGcA8VwgXgxlg9R2A7GvizYYH+iRgbMJYX6gPlIxIxkYBQAAPBoU8Q==');
  result[DTM_SL_TRIANGLE]  := DTMFromString('m6wAAAHic42ZgYLgOxKeA+DwQXwXi+0D8AIgfA/E1IH4ExBeB+CEQP4PKvQLij0D8DYifA/ElIL4L1XsBiN8B8YkNhQynNiHw6c1FDEfX5jPsXZ4Flju0OpfhQI8Mw/H1BQz8QPXEYkYSMBIAABUkKDc=');
  result[DTM_SL_ROLL]      := DTMFromString('mAAEAAHic42FgYNgGxDuBeCMQr4TSK6Bi+4F4LxAfAOKjQHwciOcA8QQgXgzE84G4D4inAPFyIJ4KxHOh+hcA8QwQXS/OMLNKjGFCsShDZ64Iw7w6cYYVbRIMk0pEwexZ1WIMzZnCDH2FIgzLWiUY+IF6SMGMJGJkAABm7x6B');
  result[DTM_SL_PIE]       := DTMFromString('m1gAAAHic42JgYFjKyMCwBIhnA/EkIJ4GxKuAeBsUrwTiZUA8D6h2OhD3QOkVQLwOiBcB8SQg7gTihUD8+3kfQ7QpL8PPJz1gNggjs0HYW4ebgR+olhjMSCRGAACeZCHD');
  result[DTM_SL_CHOCOLATE] := DTMFromString('m6wAAAHic42ZgYIhgZGAIA+JMIHYH4mggjgHiBCAOAeIAII4D4kAgvgtUfwKILwLxCyD+AMRPgfg2EF8F4vtAfA6IXwFxiqU8GAfpSzKUuagyZNgogHGatQJDooUcWC7SWAbM5weqJxYzkoCRAABzRBYf');
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Finds and clicks the correct food.
 *)
function SL_ClickFood(DTMs: TIntegerArray): boolean;
var
  i, t: integer;
  foods: TStringArray;
begin
  if (not loggedIn()) then
    exit;

  foods := ['doughnut', 'baguette', 'square', 'triangle', 'roll', 'meat pie', 'chocolate'];

  // to avoid out of range errors
  if (length(foods) <> length(DTMs)) then
  begin
    addToSRLLog('SL_ClickFood: Invalid foods or DTMs array');
    exit;
  end;

  for i := 0 to high(foods) do
    // the color of the text that tells you which food to take
    if (findTextTPA(2070783, 15, MSX1, MSY1, MSX2, MSY2, foods[i], upCharsEx, nothing)) then
    begin
      addToSRLLog('SL_ClickFood: Need to click '+capitalize(foods[i]));

      t := (getSystemTime + 5000);
      while ((not result) and (getSystemTime < t)) do
      begin
        if (clickDTMRotatedIn(DTMs[i], MSX1, MSY1, MSX2, MSY2, -Pi, Pi, Pi/30, ['hoose'], mouse_Left)) then
        begin
          addToSRLLog('SL_ClickFood: Clicked '+capitalize(foods[i]));
          result := true;
        end;

        wait(200 + random(300));
      end;

      break;
    end;
end;

(**
 * Author: Coh3n & DemiseScythe
 * Description: Solves the random.
 *)
function SL_Solve(): boolean;
var
  t, dtmPortal: integer;
  DTMs: TIntegerArray;
begin
  if (not loggedIn()) then
    exit;

  t := (getSystemTime + (5 * 60000)); // maximum 5 minutes
  dtmPortal := DTMFromString('mggAAAHicY2NgYNBjZGDQBmJVINYAYhMgtgDibUC5tUC8GYh3Q/FGIJ5zsp5h7qkGhvlnmhhmH61lmHagkmHmsRoGfqAcNsyIA0MAAArzEPs=');
  DTMs := SL_GetDTMs();
  clickNorth(SRL_ANGLE_HIGH);

  repeat
    if (findNPCChatTextMulti(['exit', 'ight'], nothing)) then
      if (clickPortal(dtmPortal)) then
      begin
        result := true;
        break;
      end;

    if (not areTalking) then
    begin
      if (SL_ClickFood(DTMs)) then
        wait(2000 + random(500));
    end else
      clickContinue(true, true); // in case there are extra messages (GE) or we get one wrong

  until(result or (getSystemTime > t));

  if (not result) then
    addToSRLLog('_Solve: '' solver timed out');

  freeDTM(dtmPortal);
  freeDTMs(DTMs);
end;

{$IFNDEF IS_INCLUDE}
{
begin
  clearDebug();
  activateClient();
  setupSRL();

  SL_Solve();
end.
}
{$ENDIF}
