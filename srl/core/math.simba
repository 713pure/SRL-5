(*
Math
====

Supporting math functions.

.. contents::

*)

const
  MATH_PI = 3.14159265358979320;
  MATH_2PI = MATH_PI * 2.0;
  MATH_PIOVER2 = MATH_PI / 2.0;
  MATH_PIOVER3 = MATH_PI / 3.0;
  MATH_PIOVER4 = MATH_PI / 4.0;
  MATH_PIOVER6 = MATH_PI / 6.0;

var
   SineArray, Cosearray: array[0..360] of Extended;
   
(*
LoadCoSineArrays
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure LoadCoSineArrays;

Load default sin/cos values. Used internally for SRL

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

*)
procedure LoadCoSineArrays;
var
  i: Integer;
  pi_const: extended;
begin
  pi_const := Pi; // not necessary, but might as well.
  for i := 0 to 360 do
  begin
    Sinearray[i] := Sin(i * pi_const / 180.0);
    Cosearray[i] := Cos(i * pi_const / 180.0);
  end;
end;

(*
CreateTPAFromText
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function CreateTPAFromText(Txt : string; Chars : string) : TPointArray;

Returns the TPointArray of the inputted Text.

.. note::

    by MastaRaymond

Example:

.. code-block:: pascal

*)
function CreateTPAFromText(Txt: string; Chars: string) : TPointArray;
var
  w,h : integer;
begin;
  result := TPAFromText(Txt,Chars,w,h);
end;

(*
RBoolEx
~~~~~~~

.. code-block:: pascal
    function RBoolEx(chance: integer): boolean;

Description: Returns a boolean, with a chance of 1 / chance

..note::
    by Rasta Magician
*)

function RBoolEx(chance: Integer): Boolean;
begin
  Result := (0 = Random(chance));
end;

(*
RBool
~~~~~

.. code-block:: pascal
    function RBool: boolean;

Description: Returns a boolean, with a 50% chance

.. note::
    by Rasta Magician
*)
function RBool: boolean;
begin
  Result := RBoolEx(2);
end;

type
  TVector = record
    x, y: Extended;
    m: Extended;
  end;

(*
fixRad
~~~~~~

.. code-block:: pascal
    function fixRad(rad: Extended): Extended;

Returns the periodic rad in the range (0,2PI].

.. note::
  By Nava2

*)
function fixRad(rad: Extended): Extended;  // by Nava2
begin
  result := rad;

  while (result >= MATH_2PI) do
    result := result - MATH_2PI;

  while (result < 0) do
    result := result + MATH_2PI;
end;


(*
AngleBetween
~~~~~~~~~~~~

.. code-block:: pascal

    function AngleBetween(v1, v2: TVector): Extended;

Calculates the angle between two TVector records. This is returned in radians
(normalized between (0, 2Pi]).

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function AngleBetween(v1, v2: TVector): Extended;
var
  a1, a2: Extended;
begin
  a1 := ArcTan2(v1.x, v1.y);
  a2 := ArcTan2(v2.x, v2.y);

  Result := fixRad(a1 - a2)
end;


(*
Normalize
~~~~~~~~~

.. code-block:: pascal
    procedure Normalize(var vect: TVector);

Converts a TVector to normal TVector (|v| = 1). 

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
procedure Normalize(var vect: TVector);
begin
  vect.x := vect.x / vect.m;
  vect.y := vect.y / vect.m;
  vect.m := 1;
end;

(*
CreateVector
~~~~~~~~~~~~

.. code-block:: pascal
    function CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;

Creates a `TVector` object. If NormalzseV is true, will set |v| = 1.

.. note::

    by readysteadygo

Example:

.. code-block:: pascal

*)
function CreateVector(Origin, vPoint: TPoint; NormalizeV: Boolean): TVector;
begin
  Result.x := vPoint.x - Origin.x;
  Result.y := 0 - (vPoint.y - Origin.y); // inverts y axis as well
  Result.m := Sqrt(Sqr(Result.x) + Sqr(Result.y));
  if (NormalizeV) then
    Normalize(Result);
end;


(*
GetSplitPt
~~~~~~~~~~

.. code-block:: pascal

    function GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;

Returns the point on a spline, defined by control points Points, at Theta

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function GetSplinePt(Points: TPointArray; Theta: Extended): TPoint;
var
  i, n: Integer;
  XTemp, YTemp: Extended;
begin
  n := GetArrayLength(Points) - 1;
  for i := 0 to n do
  begin
    XTemp := XTemp + (BinCoe(n, i) * Points[i].x * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
    YTemp := YTemp + (BinCoe(n, i) * Points[i].y * Pow((1 - Theta), n - i) *
      Pow(Theta, i));
  end;
  Result.x := Round(XTemp);
  Result.y := Round(YTemp);
end;

(*

SRL_GaussStd
~~~~~~~~~~~~

This is a functional pointer. It behaves transparently as a regular function
would. This function will behave as so: it will return a random Extended 
normally distributed with a mean of 0 and a standard deviation of 1. 

If you need more flexibility in this (ex. mean of 2), please use GaussRandom
which converts between the Standard Normal and a custom version.

.. note:
    by: SRL Development Team

Example:

.. code-block:: pascal
    

*)

type
  TSRL_GaussSettings = record
    genStd: function: Extended;
    devRange: Extended;
    devPoint: Extended;
  end;

var
  SRL_GaussSettings: TSRL_GaussSettings;

var
    __st_second: Extended;
{

Helper method for cal_normal_random. Does polynomial calculation using the
`Horner Scheme`_

..http://en.wikipedia.org/wiki/Horner_scheme

}
const
  __gauss_norm_0 = 0.029899776;
  __gauss_norm_1 = 0.008355968;
  __gauss_norm_2 = 0.076542912;
  __gauss_norm_3 = 0.252408784;
  __gauss_norm_4 = 3.949846138;

function __gauss_poly(r, rsqr: Extended): Extended;
begin
  with SRL_GaussSettings do
  begin
    Result := __gauss_norm_0*rsqr + __gauss_norm_1;
    Result := Result*rsqr + __gauss_norm_2;
    Result := Result*rsqr + __gauss_norm_3;
    Result := Result*rsqr + __gauss_norm_4;
    Result := Result*r;
  end;
end;

(*

n2_gauss
~~~~~~~~

Calculates a standard normal value (N(0, 1)).

By definition, 68.2% of points will lie within +/- 1*sigma, 95.4% within +/- 2.

.. note::
    by: Nava2

*)
function n2_gauss(): Extended;
var
  r: Extended;
  i: Integer;
begin
  r := 0.0;
  for i := 0 to 11 do
    r := r + (random(MaxInt)*1.0)/MaxInt;

  r := (r-6.0)/4.0 ;
  result := __gauss_poly(r, r*r);
end;

(*

SetupN2Gauss
~~~~~~~~~~~~

Sets up the necessary constants for the gaussian functions used in n2_gauss.

*)

procedure setupGauss();
begin
  with SRL_GaussSettings do
  begin
    genStd := @n2_gauss;

    devPoint := 0.4;
    devRange := 0.3;
  end;

  __st_second := -2.0;
end;

function GaussBMPolar(): Extended;
var
  u, v: Extended;
  s, r: Extended;
begin
  result := -2.0;

  while ((result <= -1) or (result >= 1)) do
  begin
    { the following maintains state about the function, speed optimization. }
    if (__st_second <> -2) then
    begin
      result := __st_second;
      __st_second := -2;
      continue;
    end;
    
    u := -1 + 2*RandomE;
    v := -1 + 2*RandomE;
    s := u*u + v*v;

    if ((s = 0) or (s >= 1)) then 
      continue;

    r := sqrt(-2.0 * log10(s) / s);
    
    result := u * r;
    __st_second := v*r;
  
  end; { end while loop}      

end;

(*
  
GaussRand
~~~~~~~~~

Calculates a normally distributed point around mean (u) with a standard 
deviation of dev (o).

..note::
    by: Nava2

Example:

..code-block:: pascal
    // shooting arrows simulation:
    pt := Point(GaussRand(center.x, 0.5), GaussRand(center.y));
    WriteLn(Format('Hit the target at (%d, %d).', [pt.x, pt.y]));

*)

function GaussRand(mean, dev: Extended): Extended;
begin
  result := mean + dev*SRL_GaussSettings.genStd();
end;


(*

Gauss_Point
~~~~~~~~~~~

Calculates a point about cX, cY with radius maxRad. The sangle and eangle are 
in radians. The point is returned in the reference parameters oX, oY.

.. note::
    by Nava2

Example:
.. code-block:: pascal

    var
      gX, gY: Integer;
    // get a gaussian pt in a circle:
    Gauss_Point(MMCX, MMCY, 0, math_2PI, MMX2-MMCX, gX, gY);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure Gauss_Point(cX, cY: Integer; sAngle, eAngle: Extended; maxRad: Integer; out oX, oY: Integer);
var
  angle: Extended;
  radius: Extended;
  xShift, yShift: Integer;
begin

  if (eAngle < sAngle) then
    swap(eAngle, sAngle);

  { random angle about the center }
  angle := sAngle + (eAngle-sAngle)*SRL_GaussSettings.genStd()/2.0;

  { get normal pt about zero, where 68% lie within .5*maxRad }
  radius := GaussRand(maxRad,maxRad*SRL_GaussSettings.devPoint) - maxRad;


  { the shifting distance based on the radius and angle (both rand) }
  xShift := round(radius * Cos(angle));
  yShift := round(radius * Sin(angle));

  oX := cX + xShift;
  oY := cY + yShift;
end;

(*
GaussRange
~~~~~~~~~~

Returns a number between minI and maxI that is normally distributed in the range.

.. note::
  by Nava2

Example:

.. code-block:: pascal
    randMean := GaussRange(0, 20);

*)
function GaussRange(minI, maxI: Extended): Extended;
var
  valid: Boolean;
  mean: Extended;
  dev: Extended;
  t: Integer;
begin
  { calculate the mean }
  mean := (maxI+minI)/2.0;
  dev  := abs(maxI-minI)/2.0 * SRL_GaussSettings.devRange;

  t := 0;
  while ((not valid) and (t < 100)) do 
  begin
    Result := GaussRand(mean, dev);
    valid := ((Result >= minI) and (Result <= MaxI));

    inc(t);
  end;
  
//  WriteLn(Format('We done goofed %d times.', [t-1]));
end;

(*

iGaussRange
~~~~~~~~~~~

See `GaussRange` for more detail. Same function, but with integers.

.. note: 
    by Nava2

*)
function iGaussRange(minI, maxI: Integer): Integer;
begin
  Result := Round(GaussRange(minI, maxI));
end;

(*

GaussRandom
~~~~~~~~~~~

Computes a normally distributed number in [0, maxExt). Thus, it behaves like 
Random() would be expected to. But normally distributed about maxExt/2. 

It is a wrapper for `iGaussRange`. 

.. note: 
    by Nava2

*)
function GaussRandom(maxExt: Integer): Integer;
begin
  Result := iGaussRange(0, maxExt-1);
end;

(*

GaussBox
~~~~~~~~~

.. code-block:: pascal
    procedure GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);

Calculates a point normally distributed from the center of the passed box. It
checks for outlying points and will regenerate points if necessary.

.. note::
    by Nava2

Example:
.. code-block:: pascal

    var
      gX, gY: Integer;

    // get a gaussian pt in a circle:
    Gauss_Box(gX, gY, MMX1, MMY1, MMX2, MMY2);
    WriteLn(Format("gX, gY -> %d, %d", gX, gY);

*)

procedure GaussBox(out px, py: Integer; x1, y1, x2, y2: Integer);
begin
  px := iGaussRange(x1, x2);
  py := iGaussRange(y1, y2);

  if (not PointInBox(Point(px, py), IntToBox(x1, y1, x2, y2))) then
    SRL_Warn('GaussBox',Format('Point invalid (%d, %d)', [px, py]), warn_Terminate);
end;

(*
MakeSplinePath
~~~~~~~~~~~~~~

.. code-block:: pascal

    function MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;

Returns a spline, defined by control points Points, incrementing theta by
ThetaInc

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function MakeSplinePath(Points: TPointArray; ThetaInc: Extended): TPointArray;
var
  i: Integer;
  t: Extended;
  temp, last: TPoint;
  done: Boolean;
begin
  repeat
    if t >= 1 then
    begin
      t := 1;
      done := True;
    end;
    temp := GetSplinePt(Points, t);
    if ((temp.x <> last.x) and (temp.y <> last.y)) then
    begin
      i := i + 1;
      SetArrayLength(Result, i);
      Result[i - 1] := temp;
      last := temp;
    end;
    t := t + ThetaInc;
  until (done)
end;

(*
MidPoints
~~~~~~~~~

.. code-block:: pascal

    function MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;

Adds midpoints to Path so no distance on it is greater than MaxDist

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function MidPoints(Path: TPointArray; MaxDist: Integer): TPointArray;
var
  i, c: Integer;
  last: TPoint;
  done: Boolean;
begin
  if (getarraylength(path) > 0) then
  begin
    repeat
      last := Path[0];
      done := True;
      for i := 1 to GetArrayLength(Path) - 1 do
      begin
        if Sqrt(Pow((Path[i].x - last.x), 2) + Pow((Path[i].y - last.y), 2)) >
          MaxDist then
        begin
          done := False;
          SetArrayLength(Path, GetArrayLength(Path) + 1);
          for c := GetArrayLength(Path) - 1 downto i + 1 do
          begin
            Path[c] := Path[c - 1];
          end;
          Path[i].x := Round((last.x + Path[i + 1].x) / 2);
          Path[i].y := Round((last.y + Path[i + 1].y) / 2);
        end;
        last := Path[i];
      end;
    until (done);
  end;
  Result := Path;
end;

(*
InAbstractBox
~~~~~~~~~~~~~

.. code-block:: pascal

    function InAbstractBox(x1, y1, x2, y2, x3, y3, x4, y4: Integer; x, y: Integer): Boolean;

Returns true if point x, y is in an abstract box defined by
*x1, y1, x2, y2, x3, y3, x4, y4*.

| x1, y1     x2, y2
|    +--------+
|     \       /
|      \     /
|       +--+
| x4, y4    x3, y3

.. note::

    by BenLand100

Example:

.. code-block:: pascal

*)
function InAbstractBox(x1, y1, x2, y2, x3, y3, x4, y4: Integer; x, y: Integer):
  Boolean;
var
  U, D, R, L: Boolean;
  UB, DB, LB, RB, UM, DM, LM, RM: Extended;
begin
  UM := (-y1 - -y2) div (x1 - x2);
  DM := (-y4 - -y3) div (x4 - x3);
  if x1 - x4 <> 0 then
  begin
    LM := (-y1 - -y4) div (x1 - x4);
  end else
  begin
    LM := Pi;
  end;
  if x2 - x3 <> 0 then
  begin
    RM := (-y2 - -y3) div (x2 - x3);
  end else
  begin
    RM := Pi;
  end;
  UB := -(UM * x1) + -y1;
  RB := -(RM * x2) + -y2;
  DB := -(DM * x3) + -y3;
  LB := -(LM * x4) + -y4;
  if (UM * x + UB >= -y) then U := True;
  if (DM * x + DB <= -y) then D := True;
  if (RM <> Pi) and (RM >= 0) and (RM * x + RB <= -y) then R := True;
  if (RM <> Pi) and (RM < 0) and (RM * x + RB >= -y) then R := True;
  if (RM = Pi) and (x < x2) then R := True;
  if (LM <> Pi) and (LM >= 0) and (LM * x + LB >= -y) then L := True;
  if (LM <> Pi) and (LM < 0) and (LM * x + LB <= -y) then L := True;
  if (LM = Pi) and (x > x1) then L := True;
  if U and D and L and R then Result := True;
end;

(*
Sine
~~~~

.. code-block:: pascal

    function Sine(degrees: Integer): Extended;

Return the sin of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (sine(0) = 0) then
      WriteLn('Yay! We made maths!');

*)
function Sine(Degrees: Integer): Extended;
begin
  Result := sinearray[Trunc(FixD(Degrees))];
end;

(*
Cose
~~~~

.. code-block:: pascal

    function Cose(degrees: Integer): Extended;

Return the cos of *degrees*.

.. note::

    by Mutant Squirrle

Example:

.. code-block:: pascal

    if (Cose(0) = 1) then
      WriteLn('Yay! We made more maths!');

*)
function Cose(Degrees: Integer): Extended;
begin
  Result := cosearray[Trunc(FixD(Degrees))];
end;

(*
MMToMS
~~~~~~

.. code-block:: pascal

    function MMToMS(MM: TPoint): TPoint;

Turns a Minimap point into a close MS point.

.. note::

    by N1ke!

Example:

.. code-block:: pascal

    FindTreeOnMinimap(x, y);
    msPoint := MMToMS(Point(x,y));
    MMouse(msPoint.x, msPoint.y, 0, 0);
    //...

*)
function MMToMS(MM: TPoint): TPoint;
var
  X, Y: Integer;
  Dis: TPoint;
begin
  X := ((MM.X - 647));
  Y := ((MM.Y - 84));

  Dis := Point( (MMCX - MM.X)*-1, (MMCY - MM.Y)*-1);
  Result := Point(Round((259.5 + X)+ Dis.X*10), Round((170.0 + Y)+ Dis.Y*6.5));

  If not IntInBox(Result.X, Result.Y, IntToBox(MSX1, MSY1, MSX2, MSY2)) then
    Result := Point(-1, -1);
end;

(*
DeleteValueInStrArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInStrArray(var Arr: TStringArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" string array. Maintains current order.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInStrArray(var Arr: TStringArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInIntArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInIntArray(var Arr: TIntegerArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" Integer array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInIntArray(var Arr: TIntegerArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInFloatArray
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInFloatArray(var Arr: TExtendedArray; ValuePosition: Integer);


Deletes value with ValuePosition in "Arr" Float array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInFloatArray(var Arr: TExtendedArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInBoolArray
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInBoolArray(var Arr: TBooleanArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" Boolean array.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInBoolArray(var Arr: array of boolean; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    Swap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInTPA
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInTPA(var Arr: TPointArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" TPointArray.

.. note::

    by EvilChicken! & Coh3n

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInTPA(var Arr: TPointArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    tSwap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
DeleteValueInATPA
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure DeleteValueInATPA(var Arr: T2DPointArray; ValuePosition: Integer);

Deletes value with ValuePosition in "Arr" T2DPointArray.

.. note::

    by EvilChicken! & Coh3n

Example:

.. code-block:: pascal

*)
// TODO: Remove?
procedure DeleteValueInATPA(var Arr: T2DPointArray; ValuePosition: Integer);
var
  ArrLen, I: Integer;
begin
  ArrLen := High(Arr);
  for I := ValuePosition to ArrLen - 1 do
    tpaSwap(Arr[I], Arr[I + 1]);
  SetArrayLength(Arr, ArrLen);
end;

(*
BoxClosestPoint
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BoxClosestPoint(p : TPoint; b : TBox) : TPoint;

There are 'nine' places where the point can be (relative to a box)..
The middle, 5, is the box itself.
The rest looks like this:

|    1 | 2 | 3
|    ---------
|    4 | 5 | 6
|    ---------
|    7 | 8 | 9

Place 9 means it's past the b.x2, and past the b.y2,
therefore the smallest dist between the point and the box is the
distance between the point and the box's x2,y2 coordinate.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)

function BoxClosestPoint(p : TPoint; b : TBox) : TPoint;
var
  column,row,place : integer;
begin
  result := Point(-1,-1);

  if (p.x < B.X1) then
    Column := 1
  else if (p.x > b.x2) then
    Column := 3
  else
    Column := 2;

  if (p.y < b.y1) then
    row := 1
  else if (p.y > b.y2) then
    row := 3
  else
    row := 2;

  place := (row-1)* 3 + column;
  case Place of
    1 : Result := Point(b.x1,b.y1);
    2 : Result := Point(p.x,b.y1);
    3 : Result := point(b.x2,b.y1);
    4 : Result := point(b.x1,p.y);
    5 : Result := p;
    6 : Result := point(b.x2,p.y);
    7 : Result := point(b.x1,b.y2);
    8 : Result := point(p.x,b.y2);
    9 : Result := point(b.x2,b.y2);
  end;
end;

(*
RandomPointBoxEx
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RandomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;

Returns a point in the box which is 'aimed' near the TPoint given..
Basically it only allows points that lay within the extradist from
the closest point to be returned.
Practical example:

    Inventory Box.. When your mouse is on the right of an inv item,
    you don't want to click on the left of the box.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)
function RandomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;
var
  TPA : TPointArray;
  Dist : integer;
  ClosestPoint : TPoint;
begin
  if PointInBox(p,b) then
  begin
    result := p;
    exit;
  end;

  ClosestPoint := BoxClosestPoint(p,b);
  Dist := Distance(p.x,p.y,ClosestPoint.x,ClosestPoint.y);
  TPA := TPAFromBox(b);
  FilterPointsDist(TPA,0,dist+extraDist,p.x,p.y);

  if (length(TPA) < 1) then
    result := point(RandomRange(b.X1,b.x2),RandomRange(b.y1,b.y2))
  else
    result := TPA[random(length(tpa))];
end;

(*
MiddleBox
~~~~~~~~~

.. code-block:: pascal

    function MiddleBox(b : TBox) : TPoint;

Returns the middle of the box.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

    midPt := MiddleBox(TBox(MMX1, MMY1, MMX2, MMY2));
    // midPt == Point(MMCX, MMCY)!

*)
function MiddleBox(b : TBox) : TPoint;
begin
  result := point((b.x2+b.x1) div 2,(b.y2+b.y1) div 2);
end;

(*
GroupDigits
~~~~~~~~~~~

.. code-block:: pascal

    function GroupDigits(n: integer; token: String): String;

Nicely formats the number passed by placing *token* in between groups of three
numbers.

.. note::

    by PriSoner and Nava2

Example:

.. code-block:: pascal

    foo := GroupDigits(1000, ','); // foo -> '1,000'
    bar := GroupDigits(1500423, ' '); // bar -> '1 500 423'

*)
function GroupDigits(n: integer; token: String): String;
var
  b: integer;
begin
  Result := IntToStr(n);

  b := length(Result) + 1;
  if (b > 3) then
  repeat
    b := b - 3;
    if (b > 1) then
      insert(token, Result, b);
  until (b < 3);
end;

